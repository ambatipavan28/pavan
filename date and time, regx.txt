The Java Regex or Regular Expression is an API to define a pattern for searching or manipulating strings.

It is widely used to define the constraint on strings such as password and email validation. After learning Java regex tutorial, you will be able to test your regular expressions by the Java Regex Tester Tool.

Java Regex API provides 1 interface and 3 classes in java.util.regex package.

java.util.regex package
The Matcher and Pattern classes provide the facility of Java regular expression. The java.util.regex package provides following classes and interfaces for regular expressions.

MatchResult interface
Matcher class
Pattern class
PatternSyntaxException class
Java Regex API
Matcher class
It implements the MatchResult interface. It is a regex engine which is used to perform match operations on a character sequence.

No.	Method	Description
1	boolean matches()	test whether the regular expression matches the pattern.
2	boolean find()	finds the next expression that matches the pattern.
3	boolean find(int start)	finds the next expression that matches the pattern from the given start number.
4	String group()	returns the matched subsequence.
5	int start()	returns the starting index of the matched subsequence.
6	int end()	returns the ending index of the matched subsequence.
7	int groupCount()	returns the total number of the matched subsequence.
Pattern class
It is the compiled version of a regular expression. It is used to define a pattern for the regex engine.

No.	Method	Description
1	static Pattern compile(String regex)	compiles the given regex and returns the instance of the Pattern.
2	Matcher matcher(CharSequence input)	creates a matcher that matches the given input with the pattern.
3	static boolean matches(String regex, CharSequence input)	It works as the combination of compile and matcher methods. It compiles the regular expression and matches the given input with the pattern.
4	String[] split(CharSequence input)	splits the given input string around matches of given pattern.
5	String pattern()	returns the regex pattern.
Example of Java Regular Expressions
There are three ways to write the regex example in Java.

import java.util.regex.*;  
public class RegexExample1{  
public static void main(String args[]){  
  
Pattern p = Pattern.compile(".s");  
Matcher m = p.matcher("as");  
boolean b = m.matches();  
  
  
boolean b2=Pattern.compile(".s").matcher("as").matches();  
  
  
boolean b3 = Pattern.matches(".s", "as");  
  
System.out.println(b+" "+b2+" "+b3);  
}}  
Test it Now
Output
true true true
Regular Expression . Example
The . (dot) represents a single character.

import java.util.regex.*;  
class RegexExample2{  
public static void main(String args[]){  
System.out.println(Pattern.matches(".s", "as"));  
System.out.println(Pattern.matches(".s", "mk"));  
System.out.println(Pattern.matches(".s", "mst"));  
System.out.println(Pattern.matches(".s", "amms"));  
System.out.println(Pattern.matches("..s", "mas"));  
}}  
Test it Now
Regex Character classes
No.	Character Class	Description
1	[abc]	a, b, or c (simple class)
2	[^abc]	Any character except a, b, or c (negation)
3	[a-zA-Z]	a through z or A through Z, inclusive (range)
4	[a-d[m-p]]	a through d, or m through p: [a-dm-p] (union)
5	[a-z&&[def]]	d, e, or f (intersection)
6	[a-z&&[^bc]]	a through z, except for b and c: [ad-z] (subtraction)
7	[a-z&&[^m-p]]	a through z, and not m through p: [a-lq-z](subtraction)
Regular Expression Character classes Example
import java.util.regex.*;  
class RegexExample3{  
public static void main(String args[]){  
System.out.println(Pattern.matches("[amn]", "abcd"));  
System.out.println(Pattern.matches("[amn]", "a"));  
System.out.println(Pattern.matches("[amn]", "ammmna"));  
}}  

Java Dates
Java does not have a built-in Date class, but we can import the java.time package to work with the date and time API. The package includes many date and time classes. For example:

Class	Description
LocalDate	Represents a date (year, month, day (yyyy-MM-dd))
LocalTime	Represents a time (hour, minute, second and nanoseconds (HH-mm-ss-ns))
LocalDateTime	Represents both a date and a time (yyyy-MM-dd-HH-mm-ss-ns)
DateTimeFormatter	Formatter for displaying and parsing date-time objects
Display Current Date
To display the current date, import the java.time.LocalDate class, and use its now() method:

Example
import java.time.LocalDate; 

public class Main {
  public static void main(String[] args) {
    LocalDate myObj = LocalDate.now(); 
    System.out.println(myObj); 
  }
}
The output will be:

2021-10-10

Try it Yourself »

Display Current Time
To display the current time (hour, minute, second, and nanoseconds), import the java.time.LocalTime class, and use its now() method:

Example
import java.time.LocalTime; 

public class Main {
  public static void main(String[] args) {
    LocalTime myObj = LocalTime.now();
    System.out.println(myObj);
  }
}
The output will be:

22:49:06.942441

Try it Yourself »

Display Current Date and Time
To display the current date and time, import the java.time.LocalDateTime class, and use its now() method:

Example
import java.time.LocalDateTime; 

public class Main {
  public static void main(String[] args) {
    LocalDateTime myObj = LocalDateTime.now();
    System.out.println(myObj);
  }
}
The output will be:

2021-10-10T22:49:06.955884
